/* 1. Tuple assignment 이 실행되는 세부 순서 Ex) x, y := 0, 1
- tuple assignment: 여러 개의 값을 동시에 할당하는 방법, 여러 변수에 여러 값을 한 번에 할당할 수 있는 구문

Go에서 tuple assignment가 가능하며, 주로 함수가 여러 값을 반환할 때나, 여러 변수에 값을 동시에 할당할 때 사용한다
- Go 코드의 가독성 높인다, 여러 값을 효율적으로 처리하는 데 유용한 기능

Go에서는 "튜플(Tuple)"이라는 용어를 직접 사용하지는 않지만,
이 개념에서의 "튜플"은 사실 여러 개의 값을 한 번에 처리하는 것을 의미
- Go에서 "튜플"은 일종의 다중값(multiple values) 을 뜻한다
+ Go에서는 반환값의 자료형이 반드시 동일할 필요는 없다 (예를 들어, 두 개의 반환값을 반환하는 함수에서 하나는 int, 하나는 string 가능)

[세부 순서]
1) 오른쪽 값들의 평가
: 먼저 할당 연산자(=)의 오른쪽에 있는 모든 값들이 순서대로 평가된다.
: 각 값이 독립적으로 계산되고, 결과 값들이 임시 저장소에 저장된다. 이 때도 메모리가 할당된다. (이 메모리 할당은 런타임에 일어난다)

2) 왼쪽 변수들의 평가
: 그 다음으로, 할당 연산자의 왼쪽에 있는 변수들이 순서대로 평가된다.
: 만약 왼쪽에 기존의 변수가 있다면 그 변수의 메모리 위치가 확인되고, 만약 새로운 변수가 선언된 경우에는 메모리가 할당된다.

3) 할당
: 마지막으로, 오른쪽에서 평가된 값들이 왼쪽의 변수들에 동시에 할당된다.
: 이 단계에서는 모든 변수가 이전에 평가된 오른쪽 값들을 받는다.
- 이 동시 할당의 주요 특징은 '모든 값이 동시에 변경된다는 것' -> Go에서 tuple assignment의 중요 특성

임시 저장소에 저장된 값 자체가 좌측 변수들이 가리키는 메모리 위치로 복사된다!
- 임시 저장소의 값 자체가 좌측 변수에 할당된 메모리로 옮겨지며, 임시 저장소의 메모리 주소는 대입되지 않는다.
-- 즉, 좌측 변수들은 임시 저장소의 메모리 주소가 아닌, 임시 저장소에 저장된 값을 자신의 메모리 위치로 복사받는다.

주의할 점) 임시 값의 사용
: Go는 할당 과정에서 임시 저장소를 사용하여 오른쪽 값들을 임시로 저장한다.
: 이는 할당 과정에서 값이 서로 덮어씌워지는 것을 방지하기 위함이다.
*/

package main

import (
	"fmt"
)

// 1. 다중 값 반환 처리
// Go에서 tuple assignment는 주로 함수가 여러 값을 반환할 때 사용
func swap(x, y int) (int, int) {
	return y, x
}

func main() {
	fmt.Println("Tuple assignment에 대해 알아보자")
	a, b := swap(1, 2) // swap(1, 2)가 호출되면, 함수 내부에서 1과 2가 각각 x와 y로 전달된다. -> y는 2로, x는 1로 평가되어 임시 저장소에 저장된다.
	fmt.Println(a, b)  // 좌측의 a와 b는 새로 선언되는 변수이므로, 각각 메모리 공간이 할당된다. -> 임시 저장소에 있는 값들이 좌측 변수 a와 b에 복사된다.
	// 출력: 2 1

	// 2. 여러 변수에 한꺼번에 값 할당
	// 변수에 값을 동시에 할당할 때도 tuple assignment를 사용
	x1, y1, z1 := 1, 2, 3
	fmt.Println(x1, y1, z1) // 출력: 1 2 3

	// 3. 기존 변수와 새 변수에 값 할당
	// 기존에 선언된 변수와 새로 선언되는 변수에 동시에 값을 할당
	x2 := 1
	y2 := 2
	x2, z2 := 3, 4          // x는 기존 변수, z는 새 변수 -> 이 경우, x는 기존에 선언된 변수로 값을 업데이트하고, z는 새 변수로 할당
	fmt.Println(x2, y2, z2) // 출력: 3 2 4
}

/* 추가 의문

1. 좌측 변수와 우측 값의 개수가 일치하지 않으면?
- 좌측 변수와 우측 값의 개수가 일치하지 않으면 컴파일 에러가 발생
- 모든 좌측 변수에 대해 하나의 우측 값이 필요하며, 그렇지 않으면 Go 컴파일러가 오류를 보고한다.
- 필요 없는 값은 _를 사용해 무시할 수 있다.
- a, b, _ := values() // values()는 3개의 정수(1,2,3) 리턴, 세 번째 값은 무시

2. 좌측과 우측에 모두 변수 사용 가능여부
- 이는 특히 값의 교환이나 연산 후의 재할당과 같은 상황에서 유용
- x := 5, x = x + 2
*/
